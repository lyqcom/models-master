# Copyright 2021 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
import argparse
import os
import time
import glob
import math
import numpy as np
import PIL.Image as Image

## Params
parser = argparse.ArgumentParser()
parser.add_argument('--image_path', default='./Test/Kodak24/'
                    , type=str, help='directory of test dataset')
parser.add_argument('--output_path', default='', type=str,
                    help='path of the predict files that generated by the model')
parser.add_argument('--image_width', default=500, type=int, help='image_width')
parser.add_argument('--image_height', default=500, type=int, help='image_height')
parser.add_argument('--channel', default=3, type=int
                    , help='image channel, 3 for color, 1 for gray')

args = parser.parse_args()

def calculate_psnr(image1, image2):
    image1 = np.float64(image1)
    image2 = np.float64(image2)
    diff = image1 - image2
    diff = diff.flatten('C')
    rmse = math.sqrt(np.mean(diff**2.))
    return 20*math.log10(1.0/rmse)

def cal_psnr():
    image_list = glob.glob(os.path.join(args.image_path, '*'))
    psnr = []   #after denoise

    start_time = time.time()
    for image in sorted(image_list):
        filename = image.split('/')[-1].split('.')[0]    # get the name of image file
        # read image
        if args.channel == 3:
            img_clean = np.array(Image.open(image).resize((args.image_width, \
                                 args.image_height), Image.ANTIALIAS), dtype='float32') / 255.0
        else:
            assert args.channel == 1
            img_clean = np.expand_dims(np.array(Image.open(image).resize((args.image_width, \
                        args.image_height), Image.ANTIALIAS).convert('L'), dtype='float32') / 255.0, axis=2)

        result_file = os.path.join(args.output_path, filename+"_noise_0.bin")
        y_predict = np.fromfile(result_file, dtype=np.float32)
        y_predict = y_predict.reshape(args.channel, args.image_height, args.image_width)
        img_out = y_predict.transpose((1, 2, 0))#HWC
        img_out = np.clip(img_out, 0, 1)
        psnr_denoised = calculate_psnr(img_clean, img_out)
        psnr.append(psnr_denoised)
        print(filename, ": psnr_denoised: ", " ", psnr_denoised)

    psnr_avg = sum(psnr)/len(psnr)
    print("Average PSNR:", psnr_avg)
    print("Testing finished....")
    time_used = time.time() - start_time
    print("Time cost:"+str(time_used)+" seconds!")

if __name__ == '__main__':
    cal_psnr()
