# Builtin Configurations(DO NOT CHANGE THESE CONFIGURATIONS unless you know exactly what you are doing)
enable_modelarts: False
# Url for modelarts
data_url: ""
train_url: ""
checkpoint_url: ""
# Path for local
data_path: "/cache/data"
output_path: "/cache/train"
load_path: "/cache/checkpoint_path"
device_target: "Ascend"
enable_profiling: False

# ==============================================================================
# prepare *.mindrecord* data
coco_data_dir: ""
mindrecord_dir: ""  # also used by train.py
mindrecord_prefix: "coco_hp.train.mind"
# train related
visual_image: "false"
save_result_dir: ""
device_id: 0
device_num: 1

distribute: 'false'
need_profiler: "false"
profiler_path: "./profiler"
epoch_size: 1
train_steps: -1
enable_save_ckpt: "true"
do_shuffle: "true"
enable_data_sink: "true"
data_sink_steps: 1
save_checkpoint_path: ""
load_checkpoint_path: ""
save_checkpoint_steps: 1000
save_checkpoint_num: 1
# test related
data_dir: ""
run_mode: "test"
enable_eval: "true"
# export related
export_load_ckpt: ''
export_format: ''
export_name: ''

dataset_config:
    num_classes: 1
    num_joints: 17
    max_objs: 32
    input_res: [512, 512]
    output_res: [128, 128]
    rand_crop: False
    shift: 0.1
    scale: 0.4
    aug_rot: 0.0
    rotate: 0
    flip_prop: 0.5
    mean: np.array([0.40789654, 0.44719302, 0.47026115], dtype=np.float32)
    std: np.array([0.28863828, 0.27408164, 0.27809835], dtype=np.float32)
    flip_idx: [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]]
    edges: [[0, 1], [0, 2], [1, 3], [2, 4], [4, 6], [3, 5], [5, 6],
              [5, 7], [7, 9], [6, 8], [8, 10], [6, 12], [5, 11], [11, 12],
              [12, 14], [14, 16], [11, 13], [13, 15]]
    eig_val: np.array([0.2141788, 0.01817699, 0.00341571], dtype=np.float32)
    eig_vec: np.array([[-0.58752847, -0.69563484, 0.41340352],
                         [-0.5832747, 0.00994535, -0.81221408],
                         [-0.56089297, 0.71832671, 0.41158938]], dtype=np.float32)
    categories: [{"supercategory": "person",
                    "id": 1,
                    "name": "person",
                    "keypoints": ["nose", "left_eye", "right_eye", "left_ear", "right_ear",
                                  "left_shoulder", "right_shoulder", "left_elbow", "right_elbow",
                                  "left_wrist", "right_wrist", "left_hip", "right_hip",
                                  "left_knee", "right_knee", "left_ankle", "right_ankle"],
                    "skeleton": [[16, 14], [14, 12], [17, 15], [15, 13], [12, 13], [6, 12], [7, 13],
                                 [6, 7], [6, 8], [7, 9], [8, 10], [9, 11], [2, 3], [1, 2], [1, 3],
                                 [2, 4], [3, 5], [4, 6], [5, 7]]}]

net_config:
    down_ratio: 4
    last_level: 6
    final_kernel: 1
    stage_levels: [1, 1, 1, 2, 2, 1]
    stage_channels: [16, 32, 64, 128, 256, 512]
    head_conv: 256
    dense_hp: True
    hm_hp: True
    reg_hp_offset: True
    reg_offset: True
    hm_weight: 1
    off_weight: 1
    wh_weight: 0.1
    hp_weight: 1
    hm_hp_weight: 1
    mse_loss: False
    reg_loss: 'l1'

train_config:
    batch_size: 32
    loss_scale_value: 1024
    optimizer: 'Adam'
    lr_schedule: 'MultiDecay'
    Adam:
        weight_decay: 0.0
        decay_filter: "lambda x: x.name.endswith('.bias') or x.name.endswith('.beta') or x.name.endswith('.gamma')"
    PolyDecay:
        learning_rate: 0.00012  # 1.2e-4
        end_learning_rate: 0.0000005  # 5e-7
        power: 5.0
        eps: 0.0000001  # 1e-7
        warmup_steps: 2000
    MultiDecay:
        learning_rate: 0.00012  # 1.2e-4
        eps: 0.0000001  # 1e-7
        warmup_steps: 2000
        multi_epochs: [270, 300]
        factor: 10

eval_config:
    soft_nms: True
    keep_res: True
    multi_scales: [1.0]
    pad: 31
    K: 100
    score_thresh: 0.3

export_config:
    input_res: dataset_config.input_res
    ckpt_file: "./ckpt_file.ckpt"
    export_format: "MINDIR"
    export_name: "CenterNet_MultiPose"

---

# Help description for each configuration
enable_modelarts: "Whether training on modelarts, default: False"
data_url: "Url for modelarts"
train_url: "Url for modelarts"
data_path: "The location of the input data."
output_path: "The location of the output file."
device_target: "Running platform, choose from Ascend, GPU or CPU, and default is Ascend."
enable_profiling: 'Whether enable profiling while training, default: False'

distribute: "Run distribute, default is false."
need_profiler: "Profiling to parsing runtime info, default is false."
profiler_path: "The path to save profiling data"
epoch_size: "Epoch size, default is 1."
train_steps: "Training Steps, default is -1, i.e. run all steps according to epoch number."
device_id: "Device id, default is 0."
device_num: "Use device nums, default is 1."
enable_save_ckpt: "Enable save checkpoint, default is true."
do_shuffle: "Enable shuffle for dataset, default is true."
enable_data_sink: "Enable data sink, default is true."
data_sink_steps: "Sink steps for each epoch, default is 1."
save_checkpoint_path: "Save checkpoint path"
load_checkpoint_path: "Load checkpoint file path"
save_checkpoint_steps: "Save checkpoint steps, default is 1000."
save_checkpoint_num: "Save checkpoint numbers, default is 1."
mindrecord_dir: "Mindrecord dataset files directory"
mindrecord_prefix: "Prefix of MindRecord dataset filename."
visual_image: "Visulize the ground truth and predicted image"
save_result_dir: "The path to save the predict results"

data_dir: "Dataset directory, the absolute image path is joined by the data_dir, and the relative path in anno_path"
run_mode: "test or validation, default is test."
enable_eval: "Whether evaluate accuracy after prediction"
---

device_target: ['Ascend', 'CPU', 'GPU']
distribute: ["true", "false"]
need_profiler: ["true", "false"]
enable_save_ckpt: ["true", "false"]
do_shuffle: ["true", "false"]
enable_data_sink: ["true", "false"]
export_format: ["MINDIR"]
